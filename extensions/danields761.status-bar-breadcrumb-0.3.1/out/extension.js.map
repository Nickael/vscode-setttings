{"version":3,"sources":["../src/extension.js"],"names":["activate","path","os","fs","vscode","log","console","_isDirectory","file","stat","statSync","isDirectory","createBreadCrumbItemsFromFile","fileUri","callback","fileName","normalize","fsPath","selectedPath","homeDir","homedir","workspaceDirs","workspace","workspaceFolders","homeFound","workspaceFound","selectedWorkspaceName","selectedWorkspaceAbs","includes","relative","ws","getWorkspaceFolder","wsd","uri","name","breadcrumbItems","parsedFileName","parse","aggregatedPath","push","root","dir","split","sep","filter","a","part","join","base","reverse","NavigationQuickPickMenu","excludePatterns","fileSelectedCallback","dirSelectedCallback","_fileCallback","_dirCallback","_excludePatterns","_currentCancellationToken","undefined","abs","showDir","self","oldDirCallback","dirs","files","readdirSync","map","f","some","p","test","forEach","basename","absolute","label","detail","CancellationTokenSource","window","showQuickPick","concat","sort","then","selected","dispose","Disposable","MultipleStatusBarItems","align","_basePriority","_subItems","_subItemCommandHandles","_sbAlign","StatusBarAlignment","Left","items","num","text","hint","callable","args","r_item","createStatusBarItem","command","command_handle","commands","registerCommand","tooltip","item","show","hide","handle","StatusBarBreadCrumbExtension","_statusBarItem","_navigationMenu","_config","_lastDirShown","context","COMMANDS_AGGREGATED","command_name","command_func","bind","ExtensionConfig","onExcludePatternsChanged","reload","onDidChangeActiveTextEditor","_onNewTextEditor","_initialize","debug","_onFileChosen","_onDirChosen","activeTextEditor","currentUri","document","_validateFileUri","dirname","info","openTextDocument","showTextDocument","doc","ViewColumn","Active","dirPath","textEditor","isUntitled","setItems","_commandShowThisFileLevelNavigation","validate","scheme","showWarningMessage","COMMAND_SHOW_THIS_FILE_LEVEL_NAVIGATION","COMMAND_SHOW_LAST_DIR_LEVEL_NAVIGATION","COMMAND_SHOW_THIS_FILE_LEVEL_NAVIGATION_COMPAT","prototype","_commandShowLastDirLevelNavigation","workspaceState","_id","this_extension","subscriptions"],"mappings":"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","file":"extension.js","sourcesContent":["'use strict';\n\n// The module 'vscode' contains the VS Code extensibility API\nimport * as path from \"path\";\nimport * as os from \"os\";\nimport * as fs from \"fs\";\nimport * as vscode from \"vscode\";\nimport {Disposable} from \"vscode\";\n\nimport {ExtensionConfig} from \"./config\";\n\n//\nconst log = console;\n\n// utils\nfunction _isDirectory(file) {\n    let stat = fs.statSync(file);  // probably slow\n    return stat.isDirectory();\n}\n\nfunction createBreadCrumbItemsFromFile(fileUri, callback) {\n    // this wall of code full of shit but do exactly what it should\n    // no power to refactor it\n    let fileName = path.normalize(fileUri.fsPath);\n    let selectedPath = fileName;\n    let homeDir = path.normalize(os.homedir());\n    let workspaceDirs = vscode.workspace.workspaceFolders;\n    let homeFound = false;\n    let workspaceFound = false;\n    let selectedWorkspaceName = null;\n    let selectedWorkspaceAbs = null;\n\n    // find intersections with such root dirs as home and workspace\n    homeFound = fileName.includes(fileName);\n    if (homeFound) {\n        selectedPath = path.relative(homeDir, fileName);\n    }\n    let ws = vscode.workspace.getWorkspaceFolder(fileUri);\n    if (ws) {\n        let wsd = ws.uri.fsPath;\n        selectedPath = path.relative(wsd, fileName);\n        workspaceFound = true;\n        selectedWorkspaceName = ws.name;\n        selectedWorkspaceAbs = wsd;\n    }\n\n    // create list of breadcrumb items\n    let breadcrumbItems = [];\n    let parsedFileName = path.parse(selectedPath);\n    let aggregatedPath = null;\n\n    // push root found node\n    if (workspaceFound) {\n        breadcrumbItems.push(\n            [\n                `$(file-submodule) ${selectedWorkspaceName}`, 'Workspace root',\n                callback, selectedWorkspaceAbs\n            ]\n        );\n        aggregatedPath = selectedWorkspaceAbs;\n    } else if (homeFound) {\n        breadcrumbItems.push(\n            [`$(home)`, 'Home', callback, homeDir]\n        );\n        aggregatedPath = homeDir;\n    } else {\n        breadcrumbItems.push(\n            [` / `, 'Project root', callback, parsedFileName.root]\n        );\n        aggregatedPath = parsedFileName.root;\n    }\n\n    // push itermediate parts\n    for (\n        let part of parsedFileName.dir.split(\n            path.sep\n        ).filter(a => !!a)\n    ) {\n        aggregatedPath = path.join(aggregatedPath, part);\n        breadcrumbItems.push(\n            [\n                `$(chevron-right)\\t${part}`, `Folder ${part}`,\n                callback, aggregatedPath\n            ]\n        );\n    }\n    breadcrumbItems.push(\n        [\n            `$(chevron-right)\\t${parsedFileName.base}`, 'Current file',\n            () => {}, path.join(aggregatedPath, parsedFileName.base)\n        ]\n    );\n\n    return breadcrumbItems.reverse();\n}\n\n/**\n * Quick-pick navigation menu\n */\nclass NavigationQuickPickMenu extends Disposable {\n    /**\n     * Create menu with callbacks\n     * @param {*} excludePatterns list of regexps to preform excluding\n     * @param {*} fileSelectedCallback call in file selected using menu\n     * @param {*} dirSelectedCallback if not set will be called recursively\n     */\n    constructor(excludePatterns, fileSelectedCallback, dirSelectedCallback) {\n        super();\n        this._fileCallback = fileSelectedCallback;\n        this._dirCallback = dirSelectedCallback;\n        this._excludePatterns = excludePatterns;\n        this._currentCancellationToken = null;\n        if (dirSelectedCallback === undefined || dirSelectedCallback === null) {\n            this._dirCallback = (abs, name) => this.showDir(abs);\n        } else {\n            this._dirCallback = function(self, oldDirCallback) {\n                return (abs, name) => {\n                    self.showDir(abs);\n                    oldDirCallback(abs, name);\n                };\n            }(this, this._dirCallback); // avoid closure name shadowing\n        }\n    }\n\n    /**\n     * Create menu for directory\n     * @param {*} dir given directory\n     */\n    showDir(dir) {\n        // list current dir files splitting them into files and directories\n        let dirs = [];\n        let files = [];\n        fs.readdirSync(dir).map(\n            f => path.normalize(path.join(dir, f)),\n        ).filter(\n            f => !this._excludePatterns.some(p => p.test(f)),\n        ).forEach(\n            absolute => {\n                let name = path.basename(absolute);\n                if (_isDirectory(absolute)) {\n                    dirs.push({label: `$(file-directory) ${name}`, detail: absolute});\n                } else {\n                    files.push({label: name, detail: absolute});\n                }\n            },\n        );\n        // show menu items, on then call appropriate callback\n        this._currentCancellationToken = new vscode.CancellationTokenSource();\n        vscode.window.showQuickPick(\n            [\n                {label: '..', detail: path.join(dir, '..')},\n                {label: '.', detail: dir},\n            ].concat(dirs.sort().concat(files.sort())),\n        ).then(\n            selected => {\n                this._currentCancellationToken = null;\n                if (selected === undefined) {\n                    return;\n                }\n                if (selected.label === '.') {\n                    return;\n                }\n\n                if (_isDirectory(selected.detail)) {\n                    this._dirCallback(selected.detail, selected.name);\n                } else {\n                    this._fileCallback(selected.detail, selected.name);\n                }\n            },\n        );\n    }\n\n    dispose() {\n        if (this._currentCancellationToken) {\n            this._currentCancellationToken.dispose();\n            this._currentCancellationToken = null;\n        }\n    }\n}\n\n/**\n * Class is untended to group and control multiple status-bar items at once\n *  providing multiple control methods like\n *  @see [show](#MultipleStatusBarItem.show) and @see [hide](#MultipleStatusBarItem.hide)\n */\nclass MultipleStatusBarItems extends Disposable {\n    constructor(align) {\n        super();\n        this._basePriority = -50;\n        this._subItems = [];\n        this._subItemCommandHandles = [];\n        this._sbAlign = align || vscode.StatusBarAlignment.Left;\n    }\n\n    /**\n     * Set group of status-bar items strictly aligned together\n     * @param items\n     * list of tuples in form (item_label, callable, callable_args)\n     */\n    setItems(items) {\n        this.dispose();\n\n        let num = 0;\n        for (let [text, hint, callable, args] of items) {\n            let r_item = vscode.window.createStatusBarItem(\n                this._sbAlign, this._basePriority + num++\n            );\n\n            let command = 'extension._internalCommand' + num;\n            let command_handle = vscode.commands.registerCommand(\n                command, () => callable(args)\n            );\n\n            r_item.text = text;\n            r_item.command = command;\n            r_item.tooltip = hint;\n\n            this._subItems.push(r_item);\n            this._subItemCommandHandles.push(command_handle);\n        }\n    }\n\n    /**\n     * Show elements\n     */\n    show() {\n        for (let item of this._subItems) {\n            item.show();\n        }\n    }\n\n    /**\n     * Hide elements\n     */\n    hide() {\n        for (let item of this._subItems) {\n            item.hide();\n        }\n    }\n\n    dispose() {\n        for (let item of this._subItems) {\n            item.dispose();\n        }\n        for (let handle of this._subItemCommandHandles) {\n            handle.dispose();\n        }\n    }\n}\n\n/**\n * Extension entry point with global state\n */\nclass StatusBarBreadCrumbExtension extends Disposable {\n    constructor() {\n        super();\n        this._statusBarItem = null;\n        this._navigationMenu = null;\n        this._config = null;\n        this._lastDirShown = null;\n        this._config = null;\n    }\n\n    /**\n     * Same as `extension.activate`\n     * @param {*} context extension context\n     */\n    activate(context) {\n        // Register commands\n        for (let [command_name, command_func] of StatusBarBreadCrumbExtension.COMMANDS_AGGREGATED) {\n            vscode.commands.registerCommand(\n                command_name, command_func.bind(this)\n            );\n        }\n\n        // Get configuration\n        this._config = new ExtensionConfig();\n\n        // Reload on config change\n        this._config.onExcludePatternsChanged(this.reload.bind(this));\n\n        // Subscribe for current document changed events\n        vscode.window.onDidChangeActiveTextEditor(this._onNewTextEditor.bind(this));\n\n        // Create status bar item\n        this._statusBarItem = new MultipleStatusBarItems();\n\n        // initialize\n        this._initialize();\n    }\n\n    /**\n     * Perform extension reloading\n     * Dont need to recreate all resources\n     */\n    reload() {\n        log.debug('Reloading configuration ...');\n\n        // dispose before recreating\n        this._navigationMenu.dispose();\n\n        // initialize again\n        this._initialize();\n    }\n\n    dispose() {\n        this._statusBarItem.dispose();\n        if (this._navigationMenu) {\n            this._navigationMenu.dispose();\n        }\n    }\n\n    // private\n    _initialize() {\n        // Create navigation menu\n        this._navigationMenu = new NavigationQuickPickMenu(\n            this._config.excludePatterns, this._onFileChosen.bind(this), this._onDirChosen.bind(this)\n        );\n\n        // Call active editor changed manually first time\n        this._onNewTextEditor(vscode.window.activeTextEditor);\n    }\n\n    _commandShowThisFileLevelNavigation(dir) {\n        if (dir == undefined || dir === undefined) {\n            let currentUri = vscode.window.activeTextEditor.document.uri;\n            if (!this._validateFileUri(currentUri, true)) {\n                return;\n            }\n            dir = path.dirname(path.normalize(currentUri.fsPath));\n        }\n\n        log.info('Showing quick open menu for ' + dir);\n\n        // show directory in menu\n        this._navigationMenu.showDir(dir);\n    }\n\n    _commandShowLastDirLevelNavigation(dir) {\n        log.info(`Showing last dir ${this._lastDirShown}`);\n\n        // show last dir\n        if (this._lastDirShown != null) {\n            this._navigationMenu.showDir(this._lastDirShown);\n        }\n    }\n\n    _onFileChosen(fileName) {\n        log.info('Opening file in current editor ' + fileName)\n\n        // open document at current view column and show it\n        vscode.workspace.openTextDocument(fileName).then(\n            doc => vscode.window.showTextDocument(doc, vscode.ViewColumn.Active)\n        );\n    }\n\n    _onDirChosen(dirPath) {\n        log.info(`dir chosen ${dirPath}`);\n\n        this._lastDirShown = dirPath;\n    }\n\n    _onNewTextEditor(textEditor) {\n        // skip if there is no active editor or no document or it's untitled\n        if (!textEditor || !textEditor.document || textEditor.document.isUntitled) {\n            this._statusBarItem.setItems([]);\n            return;\n        }\n\n        let document = textEditor.document;\n        if (!this._validateFileUri(document.uri)) {\n            return;\n        }\n\n        // log event\n        log.info('new document opened ' + document.fileName);\n\n        // set current statusbar item text and show it\n        this._statusBarItem.setItems(\n            createBreadCrumbItemsFromFile(\n                document.uri, (dir) => {\n                    if (_isDirectory(dir)) {\n                        this._onDirChosen(dir);\n                        this._commandShowThisFileLevelNavigation(dir);\n                    }\n                    // else do nothing since only current file not a folder\n                }\n            )\n        );\n        this._statusBarItem.show();\n    }\n\n    _validateFileUri(uri, validate) {\n        if (uri.scheme !== 'file' && validate) {\n            vscode.window.showWarningMessage(\n                `Sorry, but remote files (current file scheme ${uri.scheme}) are not supported`\n            );\n            return false;\n        }\n        return true;\n    }\n}\n\n// Aggregated list of needful commands\nStatusBarBreadCrumbExtension.COMMAND_SHOW_THIS_FILE_LEVEL_NAVIGATION = '' +\n    'statusBarBreadcrumb.showThisFileLevelNavigation';\nStatusBarBreadCrumbExtension.COMMAND_SHOW_LAST_DIR_LEVEL_NAVIGATION =  '' +\n    'statusBarBreadcrumb.showLastDirLevelNavigation';\nStatusBarBreadCrumbExtension.COMMAND_SHOW_THIS_FILE_LEVEL_NAVIGATION_COMPAT = '' +\n    'statusBarBreadcrumb.showSameLevelFilesForGiven';\nStatusBarBreadCrumbExtension.COMMANDS_AGGREGATED = [\n    [\n        StatusBarBreadCrumbExtension.COMMAND_SHOW_THIS_FILE_LEVEL_NAVIGATION,\n        StatusBarBreadCrumbExtension.prototype._commandShowThisFileLevelNavigation\n    ],\n    [\n        // TODO have to be deleted later\n        StatusBarBreadCrumbExtension.COMMAND_SHOW_THIS_FILE_LEVEL_NAVIGATION_COMPAT,\n        StatusBarBreadCrumbExtension.prototype._commandShowThisFileLevelNavigation\n    ],\n    [\n        StatusBarBreadCrumbExtension.COMMAND_SHOW_LAST_DIR_LEVEL_NAVIGATION,\n        StatusBarBreadCrumbExtension.prototype._commandShowLastDirLevelNavigation\n    ],\n];\n\n// extension activate method\nexport function activate(context) {\n    log.info('extension ' + context.workspaceState._id + ' has been initialized');\n\n    // Create and activate extension instance which is disposable, so deactivate isn't needed\n    let this_extension = new StatusBarBreadCrumbExtension();\n    this_extension.activate(context);\n    // Sub for dispose so extension will be disposed automatically and we don't need manage object life-cycle manually\n    context.subscriptions.push(this_extension);\n}\n"]}