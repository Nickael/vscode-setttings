{"version":3,"sources":["../src/config.js"],"names":["minimatch","vscode","ExtensionConfig","_excludePatternsCallback","_patternsCached","_filesConfig","_extConfig","workspace","onDidChangeConfiguration","_configChanged","bind","callback","getConfiguration","filesExclude","get","additionalFilesExclude","patterns","Object","assign","entries","filter","pattern","enable","map","_","makeRe","_calcPatterns"],"mappings":";;;;;;;;;;;AAAA;;IAAYA,S;;AACZ;;IAAYC,M;;;;;;AAEZ;;;IAGaC,e,WAAAA,e;AACT,+BAAc;AAAA;;AACV,aAAKC,wBAAL,GAAgC,IAAhC;AACA,aAAKC,eAAL,GAAuB,IAAvB;AACA,aAAKC,YAAL,GAAoB,IAApB;AACA,aAAKC,UAAL,GAAkB,IAAlB;;AAEAL,eAAOM,SAAP,CAAiBC,wBAAjB,CAA0C,KAAKC,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAA1C;AACA;AACA,aAAKD,cAAL;AACH;;AAED;;;;;;;;iDAIyBE,Q,EAAU;AAC/B,iBAAKR,wBAAL,GAAgCQ,QAAhC;AACH;;AAED;;;;;;;;yCAYiB;AACb,iBAAKN,YAAL,GAAoBJ,OAAOM,SAAP,CAAiBK,gBAAjB,CAAkC,OAAlC,EAA2C,IAA3C,CAApB;AACA,iBAAKN,UAAL,GAAkBL,OAAOM,SAAP,CAAiBK,gBAAjB,CAAkC,qBAAlC,EAAyD,IAAzD,CAAlB;AACA,iBAAKH,cAAL,GAAsB,IAAtB;;AAEA,gBAAI,KAAKN,wBAAL,KAAkC,IAAtC,EAA4C;AACxC,qBAAKA,wBAAL;AACH;AACJ;;;wCAEe;AACZ;AACA,gBAAIU,eAAe,KAAKR,YAAL,CAAkBS,GAAlB,CAAsB,SAAtB,CAAnB;AACA,gBAAIC,yBAAyB,KAAKT,UAAL,CAAgBQ,GAAhB,CAAoB,wBAApB,CAA7B;;AAEA;AACA,gBAAIE,iBAAJ;AACA,gBAAI,CAACH,YAAL,EAAmB;AACfG,2BAAW,EAAX;AACH,aAFD,MAEO;AACHA,2BAAWH,YAAX;AACH;;AAED,gBAAIE,sBAAJ,EAA4B;AACxBC,2BAAWC,OAAOC,MAAP,CAAcF,QAAd,EAAwBD,sBAAxB,CAAX;AACH;;AAED,mBAAOE,OAAOE,OAAP,CAAeH,QAAf,EAAyBI,MAAzB,CACH;AAAA;AAAA,oBAAEC,OAAF;AAAA,oBAAWC,MAAX;;AAAA,uBAAuBA,MAAvB;AAAA,aADG,EAELC,GAFK,CAGH;AAAA;AAAA,oBAAEF,OAAF;AAAA,oBAAWG,CAAX;;AAAA,uBAAkBxB,UAAUyB,MAAV,CAAiBJ,OAAjB,CAAlB;AAAA,aAHG,CAAP;AAKH;;;4BAvCqB;AAClB,gBAAI,KAAKjB,eAAL,KAAyB,IAA7B,EAAmC;AAC/B,qBAAKA,eAAL,GAAuB,KAAKsB,aAAL,EAAvB;AACH;AACD,mBAAO,KAAKtB,eAAZ;AACH","file":"config.js","sourcesContent":["import * as minimatch from \"minimatch\";\nimport * as vscode from \"vscode\";\n\n/**\n * Aggregate and provide sensitive configuration values\n */\nexport class ExtensionConfig {\n    constructor() {\n        this._excludePatternsCallback = null;\n        this._patternsCached = null;\n        this._filesConfig = null;\n        this._extConfig = null;\n\n        vscode.workspace.onDidChangeConfiguration(this._configChanged.bind(this));\n        // prepares config\n        this._configChanged();\n    }\n\n    /**\n     * Subscribe callback on configuration change event\n     * @param {*} callback\n     */\n    onExcludePatternsChanged(callback) {\n        this._excludePatternsCallback = callback;\n    }\n\n    /**\n     * List of globs patterns which taken from two sources:\n     *  - Default IDE patterns `files.exclude`\n     *  - Extension patterns `'statusBarBreadcrumb.additionalFilesExclude`\n     */\n    get excludePatterns() {\n        if (this._patternsCached === null) {\n            this._patternsCached = this._calcPatterns();\n        }\n        return this._patternsCached;\n    }\n\n    _configChanged() {\n        this._filesConfig = vscode.workspace.getConfiguration(\"files\", null);\n        this._extConfig = vscode.workspace.getConfiguration(\"statusBarBreadcrumb\", null);\n        this._configChanged = null;\n\n        if (this._excludePatternsCallback !== null) {\n            this._excludePatternsCallback();\n        }\n    }\n\n    _calcPatterns() {\n        // get configuration values related\n        let filesExclude = this._filesConfig.get('exclude');\n        let additionalFilesExclude = this._extConfig.get('additionalFilesExclude');\n\n        //\n        let patterns;\n        if (!filesExclude) {\n            patterns = [];\n        } else {\n            patterns = filesExclude;\n        }\n\n        if (additionalFilesExclude) {\n            patterns = Object.assign(patterns, additionalFilesExclude);\n        }\n\n        return Object.entries(patterns).filter(\n            ([pattern, enable]) => enable\n        ).map(\n            ([pattern, _]) => minimatch.makeRe(pattern)\n        );\n    }\n}\n"]}